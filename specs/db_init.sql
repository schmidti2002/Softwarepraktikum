-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


ALTER TABLE IF EXISTS public."Graph" DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public."ApiKey" DROP CONSTRAINT IF EXISTS "user";

ALTER TABLE IF EXISTS public."GraphNode" DROP CONSTRAINT IF EXISTS graph;

ALTER TABLE IF EXISTS public."GraphEdge" DROP CONSTRAINT IF EXISTS "from";

ALTER TABLE IF EXISTS public."GraphEdge" DROP CONSTRAINT IF EXISTS "to";

ALTER TABLE IF EXISTS public."GraphFavorite" DROP CONSTRAINT IF EXISTS state;

ALTER TABLE IF EXISTS public."GraphFavorite" DROP CONSTRAINT IF EXISTS graph;

ALTER TABLE IF EXISTS public."CodeState" DROP CONSTRAINT IF EXISTS snippet;

ALTER TABLE IF EXISTS public."GraphAlgo" DROP CONSTRAINT IF EXISTS snippet;

ALTER TABLE IF EXISTS public."SortAlgo" DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public."SortAlgo" DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public."ListAlgo" DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public."Sort" DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public."Sort" DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public."List" DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public."ListFavorite" DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public."ListFavorite" DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public."SortFavorite" DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public."SortFavorite" DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public."GraphHistory" DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public."GraphHistory" DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public."GraphHistory" DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public."SortHistory" DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public."SortHistory" DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public."SortHistory" DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public."ListHistory" DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public."ListHistory" DROP CONSTRAINT IF EXISTS None;

ALTER TABLE IF EXISTS public."ListHistory" DROP CONSTRAINT IF EXISTS None;



DROP TABLE IF EXISTS public."User";

CREATE TABLE IF NOT EXISTS public."User"
(
    id uuid NOT NULL,
    name text NOT NULL,
    passwd character varying NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."Graph";

CREATE TABLE IF NOT EXISTS public."Graph"
(
    id uuid NOT NULL,
    owner uuid NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."ApiKey";

CREATE TABLE IF NOT EXISTS public."ApiKey"
(
    "user" uuid NOT NULL,
    key character varying NOT NULL,
    created timestamp with time zone NOT NULL,
    PRIMARY KEY (key)
);

DROP TABLE IF EXISTS public."GraphNode";

CREATE TABLE IF NOT EXISTS public."GraphNode"
(
    id uuid NOT NULL,
    graph uuid NOT NULL,
    value text,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."GraphEdge";

CREATE TABLE IF NOT EXISTS public."GraphEdge"
(
    "from" uuid NOT NULL,
    "to" uuid NOT NULL,
    PRIMARY KEY ("from")
);

DROP TABLE IF EXISTS public."CodeSnippet";

CREATE TABLE IF NOT EXISTS public."CodeSnippet"
(
    id uuid NOT NULL,
    code text[] NOT NULL,
    js text NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."GraphFavorite";

CREATE TABLE IF NOT EXISTS public."GraphFavorite"
(
    id uuid NOT NULL,
    name text NOT NULL,
    data uuid NOT NULL,
    state uuid,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."CodeState";

CREATE TABLE IF NOT EXISTS public."CodeState"
(
    id uuid NOT NULL,
    state json NOT NULL,
    snippet uuid NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."GraphAlgo";

CREATE TABLE IF NOT EXISTS public."GraphAlgo"
(
    id uuid NOT NULL,
    name text NOT NULL,
    version integer NOT NULL DEFAULT 1,
    snippet uuid NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."SortAlgo";

CREATE TABLE IF NOT EXISTS public."SortAlgo"
(
    id uuid NOT NULL,
    name text NOT NULL,
    version integer NOT NULL DEFAULT 1,
    snippet uuid NOT NULL,
    type text NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."ListAlgo";

CREATE TABLE IF NOT EXISTS public."ListAlgo"
(
    id uuid NOT NULL,
    name text NOT NULL,
    version integer NOT NULL DEFAULT 1,
    snippet uuid NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."Sort";

CREATE TABLE IF NOT EXISTS public."Sort"
(
    id uuid NOT NULL,
    owner uuid NOT NULL,
    "values" integer[] NOT NULL,
    type text NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."List";

CREATE TABLE IF NOT EXISTS public."List"
(
    id uuid NOT NULL,
    owner uuid NOT NULL,
    "values" text[] NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."ListFavorite";

CREATE TABLE IF NOT EXISTS public."ListFavorite"
(
    id uuid NOT NULL,
    name text NOT NULL,
    data uuid NOT NULL,
    state uuid,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."SortFavorite";

CREATE TABLE IF NOT EXISTS public."SortFavorite"
(
    id uuid NOT NULL,
    name text NOT NULL,
    data uuid NOT NULL,
    state uuid,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."SortType";

CREATE TABLE IF NOT EXISTS public."SortType"
(
    type text NOT NULL,
    PRIMARY KEY (type)
);

DROP TABLE IF EXISTS public."GraphHistory";

CREATE TABLE IF NOT EXISTS public."GraphHistory"
(
    id uuid NOT NULL,
    "user" uuid NOT NULL,
    "time" timestamp with time zone NOT NULL,
    data uuid NOT NULL,
    algo uuid NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."SortHistory";

CREATE TABLE IF NOT EXISTS public."SortHistory"
(
    id uuid NOT NULL,
    "user" uuid NOT NULL,
    "time" timestamp with time zone NOT NULL,
    data uuid NOT NULL,
    algo uuid NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public."ListHistory";

CREATE TABLE IF NOT EXISTS public."ListHistory"
(
    id uuid NOT NULL,
    "user" uuid NOT NULL,
    "time" timestamp with time zone NOT NULL,
    data uuid NOT NULL,
    algo uuid NOT NULL,
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public."Graph"
    ADD FOREIGN KEY (owner)
    REFERENCES public."User" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."ApiKey"
    ADD CONSTRAINT "user" FOREIGN KEY ("user")
    REFERENCES public."User" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."GraphNode"
    ADD CONSTRAINT graph FOREIGN KEY (graph)
    REFERENCES public."Graph" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."GraphEdge"
    ADD CONSTRAINT "from" FOREIGN KEY ("from")
    REFERENCES public."GraphNode" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."GraphEdge"
    ADD CONSTRAINT "to" FOREIGN KEY ("to")
    REFERENCES public."GraphNode" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."GraphFavorite"
    ADD CONSTRAINT state FOREIGN KEY (state)
    REFERENCES public."CodeState" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."GraphFavorite"
    ADD CONSTRAINT graph FOREIGN KEY (data)
    REFERENCES public."Graph" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."CodeState"
    ADD CONSTRAINT snippet FOREIGN KEY (snippet)
    REFERENCES public."CodeSnippet" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."GraphAlgo"
    ADD CONSTRAINT snippet FOREIGN KEY (snippet)
    REFERENCES public."CodeSnippet" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."SortAlgo"
    ADD FOREIGN KEY (type)
    REFERENCES public."SortType" (type) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT
    NOT VALID;


ALTER TABLE IF EXISTS public."SortAlgo"
    ADD FOREIGN KEY (snippet)
    REFERENCES public."CodeSnippet" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."ListAlgo"
    ADD FOREIGN KEY (snippet)
    REFERENCES public."CodeSnippet" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."Sort"
    ADD FOREIGN KEY (owner)
    REFERENCES public."User" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."Sort"
    ADD FOREIGN KEY (type)
    REFERENCES public."SortType" (type) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE RESTRICT
    NOT VALID;


ALTER TABLE IF EXISTS public."List"
    ADD FOREIGN KEY (owner)
    REFERENCES public."User" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."ListFavorite"
    ADD FOREIGN KEY (data)
    REFERENCES public."List" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."ListFavorite"
    ADD FOREIGN KEY (state)
    REFERENCES public."CodeState" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."SortFavorite"
    ADD FOREIGN KEY (data)
    REFERENCES public."Sort" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."SortFavorite"
    ADD FOREIGN KEY (state)
    REFERENCES public."CodeState" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."GraphHistory"
    ADD FOREIGN KEY ("user")
    REFERENCES public."User" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."GraphHistory"
    ADD FOREIGN KEY (data)
    REFERENCES public."Graph" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT
    NOT VALID;


ALTER TABLE IF EXISTS public."GraphHistory"
    ADD FOREIGN KEY (algo)
    REFERENCES public."GraphAlgo" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."SortHistory"
    ADD FOREIGN KEY ("user")
    REFERENCES public."User" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."SortHistory"
    ADD FOREIGN KEY (algo)
    REFERENCES public."SortAlgo" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."SortHistory"
    ADD FOREIGN KEY (data)
    REFERENCES public."Sort" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT
    NOT VALID;


ALTER TABLE IF EXISTS public."ListHistory"
    ADD FOREIGN KEY ("user")
    REFERENCES public."User" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."ListHistory"
    ADD FOREIGN KEY (algo)
    REFERENCES public."ListAlgo" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."ListHistory"
    ADD FOREIGN KEY (data)
    REFERENCES public."List" (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT
    NOT VALID;

ALTER TABLE IF EXISTS public."User"
    ADD COLUMN email text NOT NULL;

ALTER TABLE IF EXISTS public."User"
    ADD COLUMN rights boolean NOT NULL DEFAULT False;

END;