openapi: 3.0.3
info:
  title: Softwarepraktikum
  description: |-
    API spec for the server developed for the software technology internship at TU Chemnitz. 
  license: 
    name: AGPL V3.0
    url: https://www.gnu.org/licenses/agpl-3.0.en.html#license-text
  version: '0.0.1'
paths:
  /user:
    get:
      tags:
        - user
      responses: 
        '200':
          description: user found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses: 
        '200':
          description: user successfully created
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    put:
      tags:
        - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPartial'
      responses: 
        '200':
          description: user got updated
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: user not found
  /user/{userId}:
    parameters:
      - name: userId
        in: path
        description: ID of user to return
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - user
      responses: 
        '200':
          description: user got deleted
        '404':
          description: user not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    get:
      tags:
        - user
      responses: 
        '200':
          description: user found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: user not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /users:
    get:
      tags:
        - user
      responses: 
        '200':
          description: all users returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /user/login:
    get:
      tags:
        - user
      security:
        - basicAuth: []
      responses: 
        '200':
          description: login successfull. apiKey-cookie set.
        '401':
          description: login not successfull

  /sort/favorite:
    get:
      tags:
        - favorite
        - sort
      responses:
        '200':
          description: list of IDs of entries marked as favorite
          content:
            application/json: 
              schema: 
                type: array
                items:
                  type: string
                  format: uuid
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - favorite
        - sort
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: new favorite created
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: referenced entry not found
  /sort/favorite/{sortId}:
    delete:
      tags:
        - favorite
        - sort
      parameters:
        - name: sortId
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: favorite removed
        '404':
          description: favorite not found

 
  /graph/favorite:
    get:
      tags:
        - favorite
        - graph
      responses:
        '200':
          description: list of IDs of entries marked as favorite
          content:
            application/json: 
              schema: 
                type: array
                items:
                  type: string
                  format: uuid
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - favorite
        - graph
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: new favorite created
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: referenced entry not found
  /graph/favorite/{graphId}:
    delete:
      tags:
        - favorite
        - graph
      parameters:
        - name: graphId
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: favorite removed
        '404':
          description: favorite not found

  /list/favorite:
    get:
      tags:
        - favorite
        - list
      responses:
        '200':
          description: list of IDs of entries marked as favorite
          content:
            application/json: 
              schema: 
                type: array
                items:
                  type: string
                  format: uuid
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - favorite
        - list
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: new favorite created
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: referenced entry not found
  /list/favorite/{listId}:
    delete:
      tags:
        - favorite
        - list
      parameters:
        - name: listId
          required: true
          in: path
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: favorite removed
        '404':
          description: favorite not found




components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    keyAuth:
      type: apiKey
      in: "cookie"
      name: apiKey
  schemas:
    User:
      type: object
      required:
        - id
        - username
        - admin
        - email
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          example: Admin
        admin:
          type: boolean
        email:
          type: string
          example: admin@example.org
    UserPartial:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        admin:
          type: boolean
        email:
          type: string
          example: admin@example.org
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
    ForbiddenError:
      description: User not allowed to execute this operation

security:
  - keyAuth: []