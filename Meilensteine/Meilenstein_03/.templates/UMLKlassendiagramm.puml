@startuml
allowmixing

actor User

class WebApplication {
  String sessionToken

  void login()
  void show()
}

class StartPage {

  void showImprint()
  void openTutorial()
  void openUserEditor()
  void openAlgoAndDataStruct()
}

class UserRegistration {
  String newName
  String newPW
  String newEmail

  String registration(String newName, String newPW, String newEmail)
  void show()
}

class Login {
  String userName
  String password

  boolean resetPassword(String email)
  String login(String name, String pw)
  void show()
}

class AdminEditor {
  String name
  String email
  String pw

  void resetPassword(email: String, name: String)
  void removeUser(pw: String)
  void show()
}

class UserEditor {
  String password
  String username
  String sessionToken
  String email

  boolean logoutUser(String Sessiontoken)
  boolean editUser()
  void show()
  void resetPassword(String email, String userName)
}

class Tutorial {
  String videoLink

  void showVideo()
}

class AlgoAndDataStruct {

  void getNextStep()
  void fullRun()
  void stop()
  void start()
  void reset()
  boolean addFavorit(int)
  void loadFavorit(int)
  boolean deleteFavorit(int)
}

class SortView {
  int width
  int height
  image dataSet

  void paintSort()
}

class StructView {
  int width
  int height
  image structData

  + void paintStruct()
}

class InputView {
  Buttons:
   AddValue
   DeleteValue
   Sort
   AddNode
   DeleteNode
   Flip
   Reset
   AddFavorit
   LoadFavorit
   DeleteFavorit
   Stop
   Start
   FullRun

  void eventListener()
}

class CodeView {
  int codeLine
  boolean stopt

  void paintCode()
}

class Export {
  void exportPDF()
  void exportMP4()
}

class UserService {
  String userName
  String password
  String email

  String registration(String newName, String newPW, String newEmail)
  String login(String userName, String password)
}

class LogicSortAlgo {
  Array algoArray

  Array bubbleSort(Array arrayToSort)
  Array mergeSort(Array arrayToSort)
  intern()
  Array merge(Array array1, Array array2)
  Array swap(Array array, int index1, int index2)
  boolean addFavorite()
  void loadFavorite(int index)
  boolean deleteFavorite(int index)
}

class LogicHeap {
  Node start

  Node createHeap(int)
  boolean add(T)
  T remove(int)
  T get(int)
  void delete()
  Node invert()
  void swap(Node, Node)
  boolean addFavorite()
  List loadFavorite(int index)
  boolean deleteFavorite(int index)
}

class LogicList {
  Node start

  Node createList(int)
  boolean add(T)
  T remove(int)
  T get(int)
  void delete()
  Node invert()
  boolean addFavorite()
  boolean loadFavorite(int index)
  boolean deleteFavorite(int index)
}


class SortAlgoService {
  Array algoArray

  void arrayToJSON()
  boolean loadFavorite(index: int)
  boolean deleteFavorite(index: int)
}

class HeapService {
  Heap heap

  void heapToJSON()
  void loadFavorite(index: int)
  void intern()
  Heap jsonToHeap()
  boolean deleteFavorite(int index)
}

class ListService {
  List list

  void listToJSON()
  void intern()
  LinkedList jsonToList()
  boolean loadFavorite(int index)
  boolean deleteFavorite(int index)
}

class SetupFrontendService {
  String apiHostAdresse
  String endPointAdresses

  boolean checkSessionToken(String token)
  boolean createEndpoints()
}

class BackendApplication {
  String DB_Password
  String DB_Username
  String DB_Host
  String mailServer_Password
  String mailServer_Username
  String mailServer_Host
  String[] endPointLocation

  boolean checkSessionToken(String token)
  boolean createEndpoints()
}


class UserEndpoints {

  String login(String name, String password)
  String registration(String newName, String newPW, String newEMail)
}

class SortAlgoEndpoints {

  boolean saveSortAlgo()
  JSON loadSortAlgo(int)
  boolean deleteFavorite(int)
}

class HeapEndpoints {

  boolean saveHeap()
  JSON loadHeap(int)
  boolean deleteFavorite(int)
}


class ListEndpoints {

  boolean saveList()
  JSON loadList(int)
  boolean deleteFavorite(int)
}

class UserDBAbstraction <<static>> {
  String Sessiontoken

  String getSessionToken(String Password, String Username)
  boolean deleteSessionToken(String Sessiontoken)
  String[] I(String Sessiontoken)
  String resetPassword(String Email)
  boolean addUser(String Name, String Password, String Email)
  boolean removeUser(String Sessiontoken, int UserID)
  boolean editUser(String Sessiontoken, String Name, String Email, Boolean adminRights)
}

class SortAlgoAbstraction <<static>> {

  void setValues()
  void getValues()
  void deleteValues()
}


class HeapAbstraction <<static>> {

  void setValues()
  void getValues()
  void deleteValues()
}

class ListAbstraction <<static>> {

  void setValues()
  void getValues()
  void deleteValues()
}



User -- WebApplication

WebApplication *-right- Login
WebApplication *-- StartPage

StartPage *-- AlgoAndDataStruct
StartPage *-left- Tutorial
StartPage *-right- AdminEditor
StartPage *-right- UserEditor

UserRegistration --* Login
Login -- UserService
AdminEditor -- UserService
UserEditor -- UserService
UserRegistration -- UserService
SetupFrontendService -- UserService

AlgoAndDataStruct *-down-  CodeView
AlgoAndDataStruct *-down-  SortView
AlgoAndDataStruct *-down-  InputView
AlgoAndDataStruct *-left-  StructView


SortView *-- Export
StructView *-- Export


AlgoAndDataStruct *-right- LogicSortAlgo
AlgoAndDataStruct *-- LogicHeap
AlgoAndDataStruct *-right- LogicList

LogicSortAlgo -- SortAlgoService
LogicHeap -- HeapService
LogicList -- ListService

SetupFrontendService -- SortAlgoService
SetupFrontendService -- HeapService
SetupFrontendService -- ListService
SetupFrontendService -- UserService

SortAlgoService -- SortAlgoEndpoints
HeapService -- HeapEndpoints
ListService -- ListEndpoints
UserService -- UserEndpoints

BackendApplication *-- SortAlgoEndpoints
BackendApplication *-- HeapEndpoints
BackendApplication *-- ListEndpoints
BackendApplication *-- UserEndpoints
BackendApplication *-- SetupDBServer

HeapEndpoints -- SortAlgoAbstraction
HeapEndpoints -- HeapAbstraction
ListEndpoints -- ListAbstraction
SortAlgoEndpoints -- UserDBAbstraction

SortAlgoAbstraction -- DataBank
HeapAbstraction -- DataBank
ListAbstraction -- DataBank
UserDBAbstraction -- DataBank

Email -- EmailServer

SetupDBServer --> EmailServer
SetupDBServer ----> BackendApplication

SetupDBServer --> DataBank
@enduml